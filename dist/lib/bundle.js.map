{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./js/cannon.js","webpack:///./js/cannon_ball.js","webpack:///./js/enemy.js","webpack:///./js/game.js","webpack:///./js/game_view.js","webpack:///./js/index.js","webpack:///./js/moving_object.js","webpack:///./js/util.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,SAAS;;;AAGT;;AAEA;AACA;AACA;;;;;;;;;;;;ACpGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AACA,0BAA0B;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;AC5DA;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B,2CAA2C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B,sDAAsD;AAChF,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,uBAAuB;AAC1C,qBAAqB,uBAAuB;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+CAA+C,QAAQ;AACvD;AACA,kDAAkD,qBAAqB;AACvE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;AC1MA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,oBAAoB,sBAAsB;AAC1C,KAAK;;AAEL;AACA,+BAA+B;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACnEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;;;;;;;;;;;;AC9FF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;;AAEA;AACA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./js/index.js\");\n","const MovingObject = require('./moving_object');\nconst CannonBall = require('./cannon_ball');\nconst Enemy = require('./enemy');\nconst Util = require(\"./util\");\n\nclass Cannon{\n  constructor(options){\n    this.vel = [0, 0];\n    this.game = options.game;\n    this.pos = options.pos;\n    this.angle = 0;\n    this.ctx = options.ctx;\n    this.drawReloading = this.drawReloading.bind(this);\n  }\n\n  draw(ctx){\n    this.drawAngle();\n    this.drawReloading();\n    this.drawRotation();\n  }\n\n  fireCannonBall(){\n    const norm = Util.norm(this.vel);\n\n    const relVel = Util.scale(\n      Util.dir(this.vel),\n      CannonBall.SPEED\n    );\n\n    const cannonBallVel = [\n      relVel[0] + this.vel[0], relVel[1] + this.vel[1]\n    ];\n\n    let dupPos = Array.from(this.pos);\n\n    const cannonBall = new CannonBall({\n      pos: dupPos,\n      vel: [1,0],\n      color: this.color,\n      game: this.game,\n      angle: this.angle\n    });\n\n    if(this.game.cannonBallsCount != 0) {\n      this.game.add(cannonBall);\n      this.game.cannonBallsCount -= 1;\n    }\n  }\n\n  rotate(move){\n\n    if(this.angle < 25 || move[1] === -1) this.angle += move[1];\n    this.vel[0] += move[0];\n    this.vel[1] += move[1];\n  }\n\n  drawAngle(){\n    this.ctx.font = \"16px Arial\";\n    this.ctx.fillStyle = \"black\";\n    this.ctx.fillText(this.angle, 90, 490);\n    this.ctx.beginPath();\n    this.ctx.arc(112, 478, 2, 0, 2 * Math.PI);\n    this.ctx.strokeStyle='black';\n    this.ctx.stroke();\n  }\n\n  drawReloading(){\n    this.ctx.font=\"16px Arial\";\n    this.ctx.fillStyle= \"black\";\n    this.ctx.fillText(\"# of cannonballs: \"+this.game.cannonBallsCount, 50,570);\n  }\n\n  isCollidedWith(otherObject){\n    let centerDist = Util.dist(this.pos, otherObject.pos);\n    return centerDist < (this.radius + otherObject.radius);\n  }\n\n  drawRotation(){\n    let cannonTop = document.getElementById('cannon-top');\n    let cannonBottom = document.getElementById('cannon-bottom');\n    this.ctx.save();\n    this.ctx.translate(130, 520);\n    this.ctx.rotate((this.angle-70)  * Math.PI/180);\n    this.ctx.drawImage(cannonTop,-35 ,-35 , 70, 70);\n    this.ctx.restore();\n    this.ctx.save();\n    this.ctx.translate(130,520);\n    this.ctx.drawImage(cannonBottom, -40, -40, 80, 80);\n    this.ctx.restore();\n\n  }\n\n\n  move(){/*undefined since cannon is not a moving object */}\n\n\n}\n\nCannon.RADIUS = 15;\n// export default Cannon;\nmodule.exports = Cannon;\n","const MovingObject = require('./moving_object');\nconst Enemy = require('./enemy');\n\nconst DEFAULTS = {\n  COLOR: 'black',\n  RADIUS: 5,\n  SPEED: 15\n};\n\n\n\nclass CannonBall extends MovingObject {\n  constructor(options = {}){\n\n    options.color = DEFAULTS.COLOR;\n    options.pos = options.pos;\n    options.radius = DEFAULTS.RADIUS;\n    options.vel = options.vel;\n    super(options);\n    this.angle = options.angle;\n    this.radian = Math.PI * (90- this.angle)/180;\n    this.airTime = 0;\n    //\n    this.pos[1] = Math.cos(Math.PI* this.angle/ 180)* -38 + this.pos[1];\n    this.pos[0] = Math.sin(Math.PI* this.angle/180) * 38+ this.pos[0];\n\n    this.verticalVelocity = Math.sin(this.radian) * options.vel[0];\n    this.horizontalVelocity = Math.cos(this.radian) * options.vel[0];\n\n    this.windRadian = Math.PI * this.game.windAngle / 180;\n    this.windVerticalVelocity = Math.sin(this.windRadian) * this.game.windVelocity;\n    this.windHorizontalVelocity = Math.cos(this.windRadian)* this.game.windVelocity;\n  }\n\n  updateCannonBall(){\n    let gravity = 2.75 * (this.airTime);\n    this.vel[0] += this.horizontalVelocity;\n    this.vel[1] += (-1 * this.verticalVelocity) + gravity;\n\n  }\n\n  draw(ctx) {\n    // ctx.fillStyle = this.color;\n    // ctx.beginPath();\n    // ctx.arc(\n    //   this.pos[0], this.pos[1], this.radius, 0 , 2 * Math.PI, true\n    // );\n\n    // ctx.fill();\n    let cannonball = document.getElementById('cannonball');\n    ctx.drawImage(cannonball, this.pos[0] ,this.pos[1] , 15, 15);\n  }\n\n  move(timeDelta) {\n    this.updateCannonBall();\n    this.airTime += 50/4000;\n    const velocityScale = timeDelta / 30;\n    const  offsetX = this.vel[0] * velocityScale +this.windHorizontalVelocity;\n    const  offsetY = this.vel[1] * velocityScale + this.windVerticalVelocity;\n    this.pos = [this.pos[0] + offsetX, this.pos[1] + offsetY];\n    if (this.game.isOutOfBounds(this.pos)) {\n      this.game.remove(this);\n    }\n  }\n\n  collidedWith(otherObject){\n    if (otherObject instanceof Enemy && this.game.enemies.indexOf(otherObject)!== -1){\n      this.game.crashSound.play();\n      this.game.changeWind();\n      this.game.remove(otherObject);\n      this.game.remove(this);\n      otherObject.collidedWith(this);\n\n      this.game.score++;\n      this.game.enemiesVelocity = [this.game.enemiesVelocity[0] + (-this.game.score/80),0];\n    }\n  }\n}\n\nCannonBall.SPEED = 15;\nCannonBall.RADIUS = 10;\nconst NORMAL_FRAME_TIME_DELTA = 1000 / 60;\n\nmodule.exports = CannonBall;\n","const MovingObject = require('./moving_object');\nconst CannonBall = require('./cannon_ball');\n// import MovingObject from './moving_object.js';\n// let b = MovingObject;\n// debugger;\nclass Enemy extends MovingObject{\n  constructor(options){\n    options.radius = Enemy.RADIUS;\n    options.color = 'brown';\n    super(options);\n    this.enemyAnimation = [[8,510, 31, 74],[48,510, 47,74], [104,511,39,73],\n    [152,511, 29, 73], [192,510, 40, 74], [240,510,32,74]];\n    this.animationCount = 0;\n    this.animationDelay = 0;\n  }\n\n  draw(ctx){\n    let enemyImg = document.getElementById('enemy');\n      this.animationDelay += 1;\n\n    if (this.animationDelay++ >= 15){\n      this.animationDelay = 0;\n      this.animationCount++;\n\n      if (this.animationCount >= this.enemyAnimation.length){\n        this.animationCount = 0;\n        this.enemyAnimation[this.animationCount];\n      }\n\n      ctx.drawImage(enemyImg,  this.enemyAnimation[this.animationCount][0],   this.enemyAnimation[this.animationCount][1],\n          this.enemyAnimation[this.animationCount][2],\n          this.enemyAnimation[this.animationCount][3], this.pos[0],this.pos[1], 30,75);\n    } else {\n      ctx.drawImage(enemyImg,  this.enemyAnimation[this.animationCount][0],   this.enemyAnimation[this.animationCount][1],\n          this.enemyAnimation[this.animationCount][2],\n          this.enemyAnimation[this.animationCount][3], this.pos[0],this.pos[1], 30,75);\n    }\n  }\n\n  move(timeDelta) {\n\n    const velocityScale = timeDelta /30;\n    const offsetX = this.vel[0] * velocityScale;\n    const offsetY = this.vel[1] * velocityScale;\n\n    this.pos = [this.pos[0] + offsetX, this.pos[1] + offsetY];\n    if (this.pos[0] < 180) {\n      this.game.endGame();\n    }\n    if (this.game.isOutOfBounds(this.pos)) {\n      this.game.remove(this);\n    }\n  }\n\n  collidedWith(otherObject){\n    delete this;\n  }\n}\n\nEnemy.RADIUS = 28;\nmodule.exports = Enemy;\n","const Cannon = require('./cannon');\nconst CannonBall = require('./cannon_ball');\nconst Enemy = require('./enemy');\n\nclass Game {\n  constructor(ctx , soundFnc){\n    this.ctx = ctx;\n    this.cannon = new Cannon({pos: [120, 525], game: this, ctx: this.ctx});\n    this.cannonballs = [];\n    this.enemies = [];\n    this.windVelocity = (Math.random() * 2).toFixed(2);\n    this.windAngle = Math.round(Math.random() * 360);\n    this.crashSound = soundFnc('sounds/explosion.mp3');\n    this.score = 0;\n    this.cannonBallsCount = 0;\n    this.enemiesVelocity = [-0.75 + (-this.score/80),0];\n    this.endGameMsg = '';\n    this.endGame = this.endGame.bind(this);\n    this.changeWind = this.changeWind.bind(this);\n  }\n  addCannonBalls(){\n    let that = this;\n    this.cannonBallCreations = setInterval(function(){\n      that.cannonBallsCount += 1;\n    }, 1000);\n  }\n\n  cancelCannonBalls(){\n    clearInterval(this.cannonBallCreations);\n  }\n\n  addEnemies(){\n    let that = this;\n    this.enemiesCreation = setInterval(function(){\n      that.add(new Enemy({pos: [950,475], game: that, vel: that.enemiesVelocity}));\n    }, 3000);\n  }\n\n  cancelEnemies(){\n    clearInterval(this.enemiesCreation);\n  }\n\n  changeWind(){\n    this.windVelocity = (Math.random() * 2).toFixed(2);\n    this.windAngle = Math.round(Math.random() * 360);\n  }\n\n  moveObjects(delta) {\n    this.allObjects().forEach((object) => {\n      object.move(delta);\n    });\n  }\n\n  allObjects() {\n    return [].concat(this.cannon, this.cannonballs, this.enemies);\n  }\n\n  checkCollisions() {\n    const allObjects = this.allObjects();\n    for (let i = 0; i < allObjects.length; i++) {\n      for (let j = 0; j < allObjects.length; j++) {\n        const obj1 = allObjects[i];\n        const obj2 = allObjects[j];\n\n        if (!(obj1 instanceof Cannon || obj2 instanceof Cannon)) {\n          // if (obj1 instanceof CannonBall && obj2 instanceof Enemy)\n          if((obj1 instanceof Enemy && obj2 instanceof CannonBall)\n          || obj2 instanceof Enemy && obj1 instanceof CannonBall){\n            if (obj1.isCollidedWith(obj2)) {\n              const collision = obj1.collidedWith(obj2);\n              if (collision) return;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  remove(object){\n    if (object instanceof CannonBall){\n      if(this.cannonballs.indexOf(object)!== -1)\n        this.cannonballs.splice(this.cannonballs.indexOf(object), 1);\n    }else if (object instanceof Enemy){\n      if (this.enemies.indexOf(object) !== -1)\n        this.enemies.splice(this.enemies.indexOf(object), 1);\n    }\n  }\n\n  add(object){\n    if (object instanceof CannonBall){\n      this.cannonballs.push(object);\n    }\n    if (object instanceof Enemy){\n      this.enemies.push(object);\n    }\n  }\n\n  isOutOfBounds(pos) {\n    return (pos[0] < 0) || (pos[1] < 0) ||\n      (pos[0] > Game.DIM_X) || (pos[1] > Game.DIM_Y);\n  }\n\n  step(delta){\n    this.moveObjects(delta);\n    this.checkCollisions();\n  }\n\n  draw(ctx){\n    let background = document.getElementById(\"background\");\n    ctx.drawImage(background, 0,0,Game.DIM_X, Game.DIM_Y);\n    this.drawWind();\n    this.drawCastle();\n    this.drawScore();\n    this.drawHighScore();\n    this.drawEndGame();\n    this.allObjects().forEach(function(object) {\n      object.draw(ctx);\n    });\n  }\n\n  drawWind(){\n    this.ctx.font = \"16px Arial\";\n    this.ctx.fillStyle = \"white\";\n    this.ctx.fillText(this.windVelocity, 475, 90);\n\n    this.ctx.save();\n    this.ctx.translate(485,125);\n    this.ctx.rotate((this.windAngle-90-180) * Math.PI/180);\n\n    let arrow = document.getElementById('arrow');\n    this.ctx.drawImage(arrow, -25,-25, 50,50);\n    this.ctx.restore();\n\n    let wind = document.getElementById('wind');\n    this.ctx.drawImage(wind, 465,150, 50, 50);\n  }\n\n  drawCastle(){\n    let castle = document.getElementById(\"castle\");\n    this.ctx.drawImage(castle, 0, 400, 150,150);\n  }\n\n  drawScore(){\n    this.ctx.font = \"16px Arial\";\n    this.ctx.fillStyle = \"black\";\n    this.ctx.fillText(\"Score: \"+this.score, 20, 30);\n  }\n\n  endGame(){\n\n    this.endGameMsg = \"GAME OVER\";\n    window.clearInterval(this.enemiesCreation);\n    window.cancelAnimationFrame(window.requestId);\n    window.clearInterval(this.cannonBallCreations);\n\n    this.enemies = [];\n    this.cannonballs = [];\n    window.highScores.push(this.score);\n    if (this.score > window.highScore) window.highScore = this.score;\n    //this.displayScores();\n\n  }\n\n    displayScores(){\n      function sortNumber(a,b) {\n        return a - b;\n      }\n      window.highScores = window.highScores.sort(sortNumber);\n      let scoreListNode = document.getElementById(\"scoreList\");\n      while (scoreListNode.firstChild) {\n        scoreListNode.removeChild(scoreListNode.firstChild);\n      }\n\n      for (let i = window.highScores.length -1; i >= 0; i--) {\n        let li = document.createElement('LI');\n        let textNode = document.createTextNode(`${window.highScores[i]}`);\n        li.appendChild(textNode);\n        scoreListNode.appendChild(li);\n      }\n    }\n\n  drawEndGame(){\n    this.ctx.font = \"30px Arial\";\n    this.ctx.fillStyle = \"red\";\n    this.ctx.fillText(this.endGameMsg, 360, 65);\n  }\n\n  drawHighScore(){\n    this.ctx.font = \"16px Arial\";\n    this.ctx.fillStyle = \"black\";\n    this.ctx.fillText(\"High Score: \"+window.highScore, 870, 30);\n  }\n}\n\n\n\n\nGame.DIM_X = 1000;\nGame.DIM_Y = 600;\nGame.BG_COLOR = 'lightblue';\n\n// export default Game;\nmodule.exports = Game;\n","class GameView {\n  constructor(game, ctx){\n\n    this.ctx = ctx;\n    this.game = game;\n    this.cannon = this.game.cannon;\n    this.start = this.start.bind(this);\n    this.stop =  this.stop.bind(this);\n    this.animate = this.animate.bind(this);\n\n    // this.lastTime = 0;\n\n  }\n\n  bindKeyHandlers(){\n    const cannon = this.cannon;\n\n    Object.keys(GameView.MOVES).forEach((k) => {\n      const move = GameView.MOVES[k];\n      key(k, () => { cannon.rotate(move);});\n    });\n\n    key(\"space\", () => {\n      cannon.fireCannonBall();});\n  }\n\n  start() {\n    this.bindKeyHandlers();\n    this.game.addEnemies();\n    this.game.addCannonBalls();\n    this.animationPlaying = true;\n    this.animate();\n\n  }\n\n  setup(){\n    this.game.draw(this.ctx);\n  }\n\n  animate(time){\n    if(this.animationPlaying) {\n\n      const timeDelta = 1000/60;\n\n      this.game.step(timeDelta);\n      this.game.draw(this.ctx);\n      // this.lastTime = time;\n\n      this.requestId = requestAnimationFrame(this.animate.bind(this));\n      window.requestId = this.requestId;\n    }\n  }\n\n  stop(){\n    window.cancelAnimationFrame(this.requestId);\n    this.game.cancelEnemies();\n    this.game.cancelCannonBalls();\n  }\n}\n\nGameView.MOVES = {\n  w: [0, -1],\n  s: [0, 1],\n  a: [-1, 0],\n  d: [1, 0]\n};\n\nmodule.exports = GameView;\n","const Game = require('./game');\nconst GameView = require('./game_view');\n\nwindow.addEventListener(\"load\", function(event) {\n  const canvasEl = document.getElementById('game-canvas');\n  canvasEl.width = Game.DIM_X;\n  canvasEl.height = Game.DIM_Y;\n\n  window.highScores = [];\n  window.highScore = 0;\n\n  let started = false;\n  function soundFnc(src){\n\n    let sound = document.getElementById(\"sound\");\n    sound.setAttribute(\"id\", 'sound');\n    sound.src = src;\n    sound.setAttribute(\"preload\", \"auto\");\n    sound.setAttribute(\"controls\", \"none\");\n    sound.style.display = \"none\";\n    sound.volume = 0.01;\n    function play(){\n        sound.play();\n    }\n    function stop(){\n        sound.pause();\n    }\n    return sound;\n  }\n\n  function bgSoundFunc(src){\n    let bgsound = document.getElementById(\"bgsound\");\n    bgsound.setAttribute(\"id\", 'bgsound');\n    bgsound.src = src;\n    bgsound.setAttribute(\"preload\", \"auto\");\n    bgsound.setAttribute(\"controls\", \"none\");\n    bgsound.style.display = \"none\";\n    bgsound.volume = 0.01;\n    function play(){\n        bgsound.play();\n    }\n    function stop(){\n        bgsound.pause();\n    }\n    return bgsound;\n\n  }\n\n  let ctx = canvasEl.getContext(\"2d\");\n  let game = new Game(ctx, soundFnc);\n  let gameV = new GameView(game, ctx);\n  gameV.setup();\n\n  let startButton = document.getElementById(\"start\");\n  startButton.addEventListener(\"click\", () => {\n    if(!started){\n      gameV.start();\n      started = true;\n    }\n  });\n\n  let newGameButton = document.getElementById(\"new-game\");\n    newGameButton.addEventListener(\"click\", () => {\n      started = false;\n      gameV.stop();\n\n      ctx.clearRect(0,0, Game.DIM_X, Game.DIM_Y);\n      game = new Game(ctx, soundFnc);\n      gameV = new GameView(game, ctx);\n\n      gameV.setup();\n  });\n\n  let stopButton = document.getElementById(\"stop\");\n  stopButton.addEventListener(\"click\", () => {\n    if(started) {\n      gameV.stop();\n      started= false;\n    }\n  });\n\n  let audioNode = document.getElementById(\"sound\");\n  let volumeMute = document.getElementById(\"volume-mute\");\n\n  volumeMute.addEventListener(\"click\", ()=>{\n    if (!audioNode.muted)\n      audioNode.muted = true;\n  });\n\n  let volumeOpen = document.getElementById(\"volume-up\");\n  volumeOpen.addEventListener(\"click\",()=>{\n    if (audioNode.muted)\n    audioNode.muted = false;\n  });\n });\n","const Util = require('./util.js');\n\nclass MovingObject {\n  constructor(options){\n    this.pos = options.pos;\n    this.vel = options.vel;\n    this.radius = options.radius;\n    this.color = options.color;\n    this.game = options.game;\n  }\n\n  collidedWith(otherObject){}\n\n  draw(ctx) {\n    ctx.fillStyle = this.color;\n    ctx.beginPath();\n    ctx.arc(\n      this.pos[0], this.pos[1], this.radius, 0 , 2 * Math.PI, true\n    );\n\n    ctx.fill();\n  }\n\n  move(timeDelta) {\n\n    const velocityScale = timeDelta /30;\n    const offsetX = this.vel[0] * velocityScale;\n    const offsetY = this.vel[1] * velocityScale;\n\n    this.pos = [this.pos[0] + offsetX, this.pos[1] + offsetY];\n    if (this.game.isOutOfBounds(this.pos)) {\n      this.remove();\n    }\n  }\n\n  isCollidedWith(otherObject){\n    let centerDist = Util.dist(this.pos, otherObject.pos);\n    return centerDist < (this.radius + otherObject.radius);\n  }\n\n  remove(){\n    this.game.remove(this);\n  }\n}\nconst NORMAL_FRAME_TIME_DELTA = 1000 / 60;\n\nmodule.exports = MovingObject;\n","const Util = {\n  dist(pos1, pos2){\n    return Math.sqrt(\n      Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2)\n    );\n  },\n\n  // Find the length of the vector.\n  norm(vec) {\n    return Util.dist([0, 0], vec);\n  },\n  dir(vec) {\n    const norm = Util.norm(vec);\n    return Util.scale(vec, 1 / norm);\n  },\n  scale(vec, m) {\n    return [vec[0] * m, vec[1] * m];\n  },\n};\n\n// export default Util;\nmodule.exports = Util;\n"],"sourceRoot":""}